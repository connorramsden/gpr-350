// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: hulls.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Phys {

  /// <summary>Holder for reflection information generated from hulls.proto</summary>
  public static partial class HullsReflection {

    #region Descriptor
    /// <summary>File descriptor for hulls.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HullsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtodWxscy5wcm90bxIEcGh5cyLiAQoEQ0gzRBIlCghodWxsVHlwZRgBIAEo",
            "DjITLnBoeXMuQ0gzRC5IdWxsVHlwZRISCgpodWxsQ2VudGVyGAIgAygCEhsK",
            "E2lzQ29sbGlkaW5nVnNTcGhlcmUYAyABKAgSGQoRaXNDb2xsaWRpbmdWc0FB",
            "QkIYBCABKAgSGAoQaXNDb2xsaWRpbmdWU09CQhgFIAEoCBITCgtpc0NvbGxp",
            "ZGluZxgGIAEoCCI4CghIdWxsVHlwZRIPCgtIVUxMX1NQSEVSRRAAEg0KCUhV",
            "TExfQUFCQhABEgwKCEhVTExfT0JCEAIiJgoKU3BoZXJlSHVsbBIYCgRiYXNl",
            "GAEgASgLMgoucGh5cy5DSDNEIlwKCEFBQkJIdWxsEhgKBGJhc2UYASABKAsy",
            "Ci5waHlzLkNIM0QSEAoIaGFsZlNpemUYAiADKAISEQoJbWluRXh0ZW50GAMg",
            "AygCEhEKCW1heEV4dGVudBgEIAMoAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Phys.CH3D), global::Phys.CH3D.Parser, new[]{ "HullType", "HullCenter", "IsCollidingVsSphere", "IsCollidingVsAABB", "IsCollidingVSOBB", "IsColliding" }, null, new[]{ typeof(global::Phys.CH3D.Types.HullType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Phys.SphereHull), global::Phys.SphereHull.Parser, new[]{ "Base" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Phys.AABBHull), global::Phys.AABBHull.Parser, new[]{ "Base", "HalfSize", "MinExtent", "MaxExtent" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CH3D : pb::IMessage<CH3D> {
    private static readonly pb::MessageParser<CH3D> _parser = new pb::MessageParser<CH3D>(() => new CH3D());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CH3D> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phys.HullsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CH3D() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CH3D(CH3D other) : this() {
      hullType_ = other.hullType_;
      hullCenter_ = other.hullCenter_.Clone();
      isCollidingVsSphere_ = other.isCollidingVsSphere_;
      isCollidingVsAABB_ = other.isCollidingVsAABB_;
      isCollidingVSOBB_ = other.isCollidingVSOBB_;
      isColliding_ = other.isColliding_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CH3D Clone() {
      return new CH3D(this);
    }

    /// <summary>Field number for the "hullType" field.</summary>
    public const int HullTypeFieldNumber = 1;
    private global::Phys.CH3D.Types.HullType hullType_ = global::Phys.CH3D.Types.HullType.HullSphere;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Phys.CH3D.Types.HullType HullType {
      get { return hullType_; }
      set {
        hullType_ = value;
      }
    }

    /// <summary>Field number for the "hullCenter" field.</summary>
    public const int HullCenterFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_hullCenter_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> hullCenter_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> HullCenter {
      get { return hullCenter_; }
    }

    /// <summary>Field number for the "isCollidingVsSphere" field.</summary>
    public const int IsCollidingVsSphereFieldNumber = 3;
    private bool isCollidingVsSphere_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCollidingVsSphere {
      get { return isCollidingVsSphere_; }
      set {
        isCollidingVsSphere_ = value;
      }
    }

    /// <summary>Field number for the "isCollidingVsAABB" field.</summary>
    public const int IsCollidingVsAABBFieldNumber = 4;
    private bool isCollidingVsAABB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCollidingVsAABB {
      get { return isCollidingVsAABB_; }
      set {
        isCollidingVsAABB_ = value;
      }
    }

    /// <summary>Field number for the "isCollidingVSOBB" field.</summary>
    public const int IsCollidingVSOBBFieldNumber = 5;
    private bool isCollidingVSOBB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCollidingVSOBB {
      get { return isCollidingVSOBB_; }
      set {
        isCollidingVSOBB_ = value;
      }
    }

    /// <summary>Field number for the "isColliding" field.</summary>
    public const int IsCollidingFieldNumber = 6;
    private bool isColliding_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsColliding {
      get { return isColliding_; }
      set {
        isColliding_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CH3D);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CH3D other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HullType != other.HullType) return false;
      if(!hullCenter_.Equals(other.hullCenter_)) return false;
      if (IsCollidingVsSphere != other.IsCollidingVsSphere) return false;
      if (IsCollidingVsAABB != other.IsCollidingVsAABB) return false;
      if (IsCollidingVSOBB != other.IsCollidingVSOBB) return false;
      if (IsColliding != other.IsColliding) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HullType != global::Phys.CH3D.Types.HullType.HullSphere) hash ^= HullType.GetHashCode();
      hash ^= hullCenter_.GetHashCode();
      if (IsCollidingVsSphere != false) hash ^= IsCollidingVsSphere.GetHashCode();
      if (IsCollidingVsAABB != false) hash ^= IsCollidingVsAABB.GetHashCode();
      if (IsCollidingVSOBB != false) hash ^= IsCollidingVSOBB.GetHashCode();
      if (IsColliding != false) hash ^= IsColliding.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HullType != global::Phys.CH3D.Types.HullType.HullSphere) {
        output.WriteRawTag(8);
        output.WriteEnum((int) HullType);
      }
      hullCenter_.WriteTo(output, _repeated_hullCenter_codec);
      if (IsCollidingVsSphere != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsCollidingVsSphere);
      }
      if (IsCollidingVsAABB != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsCollidingVsAABB);
      }
      if (IsCollidingVSOBB != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsCollidingVSOBB);
      }
      if (IsColliding != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsColliding);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HullType != global::Phys.CH3D.Types.HullType.HullSphere) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HullType);
      }
      size += hullCenter_.CalculateSize(_repeated_hullCenter_codec);
      if (IsCollidingVsSphere != false) {
        size += 1 + 1;
      }
      if (IsCollidingVsAABB != false) {
        size += 1 + 1;
      }
      if (IsCollidingVSOBB != false) {
        size += 1 + 1;
      }
      if (IsColliding != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CH3D other) {
      if (other == null) {
        return;
      }
      if (other.HullType != global::Phys.CH3D.Types.HullType.HullSphere) {
        HullType = other.HullType;
      }
      hullCenter_.Add(other.hullCenter_);
      if (other.IsCollidingVsSphere != false) {
        IsCollidingVsSphere = other.IsCollidingVsSphere;
      }
      if (other.IsCollidingVsAABB != false) {
        IsCollidingVsAABB = other.IsCollidingVsAABB;
      }
      if (other.IsCollidingVSOBB != false) {
        IsCollidingVSOBB = other.IsCollidingVSOBB;
      }
      if (other.IsColliding != false) {
        IsColliding = other.IsColliding;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            HullType = (global::Phys.CH3D.Types.HullType) input.ReadEnum();
            break;
          }
          case 18:
          case 21: {
            hullCenter_.AddEntriesFrom(input, _repeated_hullCenter_codec);
            break;
          }
          case 24: {
            IsCollidingVsSphere = input.ReadBool();
            break;
          }
          case 32: {
            IsCollidingVsAABB = input.ReadBool();
            break;
          }
          case 40: {
            IsCollidingVSOBB = input.ReadBool();
            break;
          }
          case 48: {
            IsColliding = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CH3D message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum HullType {
        [pbr::OriginalName("HULL_SPHERE")] HullSphere = 0,
        [pbr::OriginalName("HULL_AABB")] HullAabb = 1,
        [pbr::OriginalName("HULL_OBB")] HullObb = 2,
      }

    }
    #endregion

  }

  public sealed partial class SphereHull : pb::IMessage<SphereHull> {
    private static readonly pb::MessageParser<SphereHull> _parser = new pb::MessageParser<SphereHull>(() => new SphereHull());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SphereHull> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phys.HullsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SphereHull() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SphereHull(SphereHull other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SphereHull Clone() {
      return new SphereHull(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Phys.CH3D base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Phys.CH3D Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SphereHull);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SphereHull other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SphereHull other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Phys.CH3D();
        }
        Base.MergeFrom(other.Base);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Phys.CH3D();
            }
            input.ReadMessage(Base);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AABBHull : pb::IMessage<AABBHull> {
    private static readonly pb::MessageParser<AABBHull> _parser = new pb::MessageParser<AABBHull>(() => new AABBHull());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AABBHull> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Phys.HullsReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AABBHull() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AABBHull(AABBHull other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      halfSize_ = other.halfSize_.Clone();
      minExtent_ = other.minExtent_.Clone();
      maxExtent_ = other.maxExtent_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AABBHull Clone() {
      return new AABBHull(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::Phys.CH3D base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Phys.CH3D Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "halfSize" field.</summary>
    public const int HalfSizeFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_halfSize_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> halfSize_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> HalfSize {
      get { return halfSize_; }
    }

    /// <summary>Field number for the "minExtent" field.</summary>
    public const int MinExtentFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_minExtent_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> minExtent_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MinExtent {
      get { return minExtent_; }
    }

    /// <summary>Field number for the "maxExtent" field.</summary>
    public const int MaxExtentFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_maxExtent_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> maxExtent_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MaxExtent {
      get { return maxExtent_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AABBHull);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AABBHull other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if(!halfSize_.Equals(other.halfSize_)) return false;
      if(!minExtent_.Equals(other.minExtent_)) return false;
      if(!maxExtent_.Equals(other.maxExtent_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      hash ^= halfSize_.GetHashCode();
      hash ^= minExtent_.GetHashCode();
      hash ^= maxExtent_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      halfSize_.WriteTo(output, _repeated_halfSize_codec);
      minExtent_.WriteTo(output, _repeated_minExtent_codec);
      maxExtent_.WriteTo(output, _repeated_maxExtent_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      size += halfSize_.CalculateSize(_repeated_halfSize_codec);
      size += minExtent_.CalculateSize(_repeated_minExtent_codec);
      size += maxExtent_.CalculateSize(_repeated_maxExtent_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AABBHull other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::Phys.CH3D();
        }
        Base.MergeFrom(other.Base);
      }
      halfSize_.Add(other.halfSize_);
      minExtent_.Add(other.minExtent_);
      maxExtent_.Add(other.maxExtent_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::Phys.CH3D();
            }
            input.ReadMessage(Base);
            break;
          }
          case 18:
          case 21: {
            halfSize_.AddEntriesFrom(input, _repeated_halfSize_codec);
            break;
          }
          case 26:
          case 29: {
            minExtent_.AddEntriesFrom(input, _repeated_minExtent_codec);
            break;
          }
          case 34:
          case 37: {
            maxExtent_.AddEntriesFrom(input, _repeated_maxExtent_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
